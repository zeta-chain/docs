name: Deploy to Production
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    tags:
      - "*"
jobs:
  Deploy-Production:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{
          secrets.VERCEL_TOKEN }}
      - name: Debug what files exist
        run: |
          echo "Files in root directory:"
          ls -la
          echo "Files in .vercel directory:"
          ls -la .vercel/ || echo "No .vercel directory"
      - name: Pull Environment Variables to .env
        run: vercel env pull --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Debug environment variables (safe)
        run: |
          echo "Checking for .env files..."
          if [ -f .env ]; then
            echo ".env exists with $(wc -l < .env) lines"
            echo "Has CONTENTFUL_GRAPHQL_URL: $(grep -q '^CONTENTFUL_GRAPHQL_URL=' .env && echo 'YES' || echo 'NO')"
            echo "Has CONTENTFUL_ACCESS_TOKEN: $(grep -q '^CONTENTFUL_ACCESS_TOKEN=' .env && echo 'YES' || echo 'NO')"
          else
            echo ".env does not exist"
          fi
          if [ -f .vercel/.env.production.local ]; then
            echo ".vercel/.env.production.local exists with $(wc -l < .vercel/.env.production.local) lines"
          fi
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --archive=tgz --prod --token=${{ secrets.VERCEL_TOKEN }}
